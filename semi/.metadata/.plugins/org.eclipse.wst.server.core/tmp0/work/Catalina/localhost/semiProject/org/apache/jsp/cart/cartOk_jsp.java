/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-28 05:02:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.cart;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import cart.CartDBBean;
import cart.CartBean;
import product.ProductBean;
import product.ProductDBBean;

public final class cartOk_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("cart.CartDBBean");
    _jspx_imports_classes.add("product.ProductBean");
    _jspx_imports_classes.add("cart.CartBean");
    _jspx_imports_classes.add("product.ProductDBBean");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String id = (String)session.getAttribute("id");
	if(session.getAttribute("Member") == null && session.getAttribute("id") == null){ 
		// member가 null(초기화)되면  main으로 들어갈 수 없게 
		// jsp:forward로 login으로 돌아감.
	
      out.write("\r\n");
      out.write("		<script type=\"text/javascript\">\r\n");
      out.write("			alert(\"로그인이 필요한 항목입니다.\");\r\n");
      out.write("			location.href=\"main.jsp?pages=../user_log/login\";\r\n");
      out.write("		</script>\r\n");
      out.write("	");

	} else {
		int product_number = Integer.parseInt(request.getParameter("product_number"));
		int count = Integer.parseInt(request.getParameter("count"));
		CartDBBean cartdb = CartDBBean.getInstance();
		
		ProductDBBean product = ProductDBBean.getInstance();
		ProductBean get = product.getproduct(product_number, false);
		
		ProductBean img = product.getImg(product_number);
		
		String p_name = get.getProduct_name();
		int p_price = get.getProduct_price();
		int img_number = img.getFile_number();
		
		String file_name = img.getStored_file_name();
		CartBean cart = cartdb.overlapTest(id);
		ArrayList<CartBean> list = cartdb.getCart(id);
		if(list.size()==0){
			cartdb.insertCart(id, product_number, count);
	
      out.write("\r\n");
      out.write("		<script>\r\n");
      out.write("			alert(\"장바구니에 추가되었습니다.\")\r\n");
      out.write("			document.location.href=\"main.jsp?pages=../cart/cartList\";\r\n");
      out.write("		</script>\r\n");
      out.write("	");

		} else {
		// 중복 확인
			if(product_number == cart.getProduct_number()){
		
      out.write("\n");
      out.write("			<script type=\"text/javascript\">\r\n");
      out.write("				alert(\"장바구니에 추가된 상품입니다.\");\n");
      out.write("				location.href=\"main.jsp?pages=../product/product_detail&product_number=");
      out.print(product_number);
      out.write("\"\r\n");
      out.write("			</script>\r\n");
      out.write("		");

			} else {
				cartdb.insertCart(id, product_number, count);
		
      out.write("\r\n");
      out.write("			<script>\r\n");
      out.write("				alert(\"장바구니에 추가되었습니다.\")\r\n");
      out.write("				document.location.href=\"main.jsp?pages=../cart/cartList\";\r\n");
      out.write("			</script>\r\n");
      out.write("		");

			} 
		}
	}

      out.write("\r\n");
      out.write("		\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
