/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-28 06:51:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.buy;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import product.ProductBean;
import product.ProductDBBean;
import java.text.SimpleDateFormat;
import order.OrderManageDBBean;
import order.OrderManageBean;

public final class paySuccess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("product.ProductBean");
    _jspx_imports_classes.add("product.ProductDBBean");
    _jspx_imports_classes.add("order.OrderManageBean");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("order.OrderManageDBBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	/* long o_dNum = Long.parseLong(request.getParameter("orderDNum")); */
	String[] o_dNums = request.getParameterValues("orderDNum");

	OrderManageBean omb = new OrderManageBean();
	OrderManageDBBean omdb = OrderManageDBBean.getInstance();
	omb = omdb.getOrder(Long.parseLong(o_dNums[0]));
	String p_name = omb.getProduct_name();
	int count = omb.getProduct_count();
	int price = omb.getProduct_price();
	int productNum = omb.getProduct_number();
	String orderNum = omb.getOrder_number();
	
	ProductDBBean pdb = ProductDBBean.getInstance();
	ProductBean pb = new ProductBean();
	int ship,totalPrice = 0;
	if(price >= 20000){
		ship = 0;
	} else {
		ship = 3000;
	}
	
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
	String orderDate = sdf.format(omb.getOrder_date());
	
	String name = omb.getReceiver_name();
	String phone = omb.getReceiver_phone1()+"-"+omb.getReceiver_phone2()+"-"+omb.getReceiver_phone3();
	String raddr = omb.getReceiver_raddr();
	String detailaddr = omb.getReceiver_detailaddr();
	String requested = "";
	if(omb.getRequested() == null){
		requested = "요청사항 없음";
	} else {
		requested = omb.getRequested();
	}
	String pcode = omb.getReceiver_pcode();

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write(" <div class=\"container-fluid\">\r\n");
      out.write("   <div class=\"row justify-content-center\">\r\n");
      out.write("     <div class=\"col-12 col-lg-10 col-xl-8\">\r\n");
      out.write("       <div class=\"row align-items-center mb-4\">\r\n");
      out.write("         <div class=\"col\">\r\n");
      out.write("           <h2 class=\"h5 page-title\"><small class=\"text-muted text-uppercase\">Invoice</small><br />#");
      out.print( orderNum );
      out.write("</h2>\r\n");
      out.write("         </div>\r\n");
      out.write("       </div>\r\n");
      out.write("       <div class=\"card shadow\">\r\n");
      out.write("         <div class=\"card-body p-5\">\r\n");
      out.write("           <div class=\"row mb-5\">\r\n");
      out.write("             <div class=\"col-12 text-center mb-4\">\r\n");
      out.write("               <img src=\"../assets/images/logo.svg\" class=\"navbar-brand-img brand-sm mx-auto mb-4\" alt=\"...\">\r\n");
      out.write("               <h2 class=\"mb-0 text-uppercase\">주문내역서</h2>\r\n");
      out.write("               <p class=\"text-muted\"> 대한민국<br /> 부산광역시 부산진구 중앙대로 688 한준빌딩 2층 </p>\r\n");
      out.write("             </div>\r\n");
      out.write("             <div class=\"col-md-7\">\r\n");
      out.write("               <p class=\"small text-muted text-uppercase mb-2\">Invoice from</p>\r\n");
      out.write("               <p class=\"mb-4\">\r\n");
      out.write("                 <strong>Green</strong><br /> 출고지<br /> 부산광역시 부산진구<br /> 중앙대로 688 한준빌딩 2층<br /> 051-912-1000<br />\r\n");
      out.write("               </p>\r\n");
      out.write("               <p>\r\n");
      out.write("                 <span class=\"small text-muted text-uppercase\">Invoice #</span><br />\r\n");
      out.write("                 <strong>");
      out.print( orderNum );
      out.write("</strong>\r\n");
      out.write("               </p>\r\n");
      out.write("             </div>\r\n");
      out.write("             <div class=\"col-md-5\">\r\n");
      out.write("               <p class=\"small text-muted text-uppercase mb-2\">Invoice to</p>\r\n");
      out.write("               <p class=\"mb-4\">\r\n");
      out.write("                 <strong>");
      out.print( name );
      out.write("</strong><br /> ");
      out.print( pcode );
      out.write("<br /> ");
      out.print( raddr );
      out.write("<br /> ");
      out.print( detailaddr );
      out.write("<br /> ");
      out.print( phone );
      out.write("<br />\r\n");
      out.write("               </p>\r\n");
      out.write("               <p>\r\n");
      out.write("                 <small class=\"small text-muted text-uppercase\">order Date</small><br />\r\n");
      out.write("                 <strong>");
      out.print( orderDate );
      out.write("</strong>\r\n");
      out.write("               </p>\r\n");
      out.write("             </div>\r\n");
      out.write("           </div> <!-- /.row -->\r\n");
      out.write("           <table class=\"table table-borderless table-striped\">\r\n");
      out.write("             <thead>\r\n");
      out.write("               <tr>\r\n");
      out.write("                 <th scope=\"col\">#</th>\r\n");
      out.write("                 <th scope=\"col\">Description</th>\r\n");
      out.write("                 <th scope=\"col\" class=\"text-right\">개당 가격</th>\r\n");
      out.write("                 <th scope=\"col\" class=\"text-right\">수량</th>\r\n");
      out.write("                 <th scope=\"col\" class=\"text-right\">배송비</th>\r\n");
      out.write("                 <th scope=\"col\" class=\"text-right\">총 가격</th>\r\n");
      out.write("               </tr>\r\n");
      out.write("             </thead>\r\n");
      out.write("             ");

             for(int i=0;i<o_dNums.length;i++){
            	 omb=omdb.getOrder(Long.parseLong(o_dNums[i]));
           		 p_name = omb.getProduct_name();
           		 count = omb.getProduct_count();
           		 price = omb.getProduct_price();
           		 productNum = omb.getProduct_number();

           		 pb = pdb.getproduct(productNum, false);
           		 int one_price = pb.getProduct_price();
           		 
           		 totalPrice += price;
             
      out.write(" \r\n");
      out.write("             <tbody>\r\n");
      out.write("               <tr>\r\n");
      out.write("                 <th scope=\"row\">");
      out.print( i+1 );
      out.write("</th>\r\n");
      out.write("                 <td>");
      out.print( p_name );
      out.write("</td>\r\n");
      out.write("                 <td class=\"text-right\">");
      out.print( one_price );
      out.write("원</td>\r\n");
      out.write("                 <td class=\"text-right\">");
      out.print( count );
      out.write("개</td>\r\n");
      out.write("                 <td class=\"text-right\">");
      out.print( ship );
      out.write("원</td>\r\n");
      out.write("                 <td class=\"text-right\">");
      out.print( price );
      out.write("원</td>\r\n");
      out.write("               </tr>\r\n");
      out.write("             ");

             }
             
      out.write("\r\n");
      out.write("             </tbody>\r\n");
      out.write("           </table>\r\n");
      out.write("           <div class=\"row mt-5\">\r\n");
      out.write("             <div class=\"col-md-5\">\r\n");
      out.write("               <p class=\"text-muted small\">\r\n");
      out.write("                 <strong>요청사항</strong>\r\n");
      out.write("	             <div>");
      out.print( requested );
      out.write("</div>\r\n");
      out.write("             </div>\r\n");
      out.write("             <div class=\"col-md-5\">\r\n");
      out.write("               <div class=\"text-right mr-2\">\r\n");
      out.write("                 <p class=\"mb-2 h6\">\r\n");
      out.write("                   <span class=\"text-muted\">Total : </span>\r\n");
      out.write("                   <span>");
      out.print( totalPrice );
      out.write("원</span>\r\n");
      out.write("                 </p>\r\n");
      out.write("               </div>\r\n");
      out.write("             </div>\r\n");
      out.write("           </div> <!-- /.row -->\r\n");
      out.write("         </div> <!-- /.card-body -->\r\n");
      out.write("       </div> <!-- /.card -->\r\n");
      out.write("     </div> <!-- /.col-12 -->\r\n");
      out.write("   </div> <!-- .row -->\r\n");
      out.write(" </div> <!-- .container-fluid -->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
