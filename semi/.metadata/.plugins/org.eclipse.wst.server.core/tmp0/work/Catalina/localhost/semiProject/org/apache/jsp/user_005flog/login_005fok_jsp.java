/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.65
 * Generated at: 2022-09-27 05:44:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user_005flog;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.MemberBean;
import member.MemberDBBean;

public final class login_005fok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.MemberDBBean");
    _jspx_imports_classes.add("member.MemberBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
 //로그인을 누르면  loginOk로 넘어옴.
 	String id =	request.getParameter("user_id");  
	String pwd = request.getParameter("user_pwd");
	
	MemberDBBean manager = MemberDBBean.getInstance(); 
	//instance객체를 manager로 받음
	
	int check = manager.userCheck(id, pwd);
	// 유저가 있는지 확인하는 메소드호출해서 check안에 넣음.
	MemberBean mb = manager.getMember(id);
	if(mb == null){ // id가 null이면,

      out.write("		\n");
      out.write("		<script>	\n");
      out.write("			alert(\"존재하지 않는 회원\");\n");
      out.write("			history.back(); //다시 로그인화면으로 돌아감.\n");
      out.write("		</script>\n");
		
	}else{ // 회원이 존재할 시
		String name = mb.getUser_name(); // 이름 출력-> name에 넣음.
		int grade = mb.getUser_grade();
	
		if(check == -1){ //아이디와 비밀번호가 입력값과 같을 때,
			session.setAttribute("id", id); // session으로 id를 저장
			session.setAttribute("name", name); // session으로 name을 저장
			session.setAttribute("Member", "yes"); //회원이 아니면 튕기도록 함.
			session.setAttribute("grade", grade);
			System.out.println(session.getAttribute("grade"));
			response.sendRedirect("../main/main.jsp"); // 메인화면으로 이동
		}
		else if(check == 0 ){ // 비밀번호가 틀릴때,

      out.write("		\n");
      out.write("		<script>\n");
      out.write("			alert(\"비밀번호가 맞지 않습니다.\")\n");
      out.write("			history.go(-1); // 이전페이지로 이동\n");
      out.write("		</script>\n");

		} else { // 아이디가 없을 때, 
		/*실제테스트시에는 이 케이스는 제외됨.*/

      out.write("		\n");
      out.write("		<script>\n");
      out.write("			alert(\"아이디가 존재하지 않습니다.\")\n");
      out.write("			history.go(-1); // 이전페이지로 이동\n");
      out.write("		</script>\n");

		}
	}

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
